# -*- coding: utf-8 -*-
"""00_Keras-Basics (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-pYnW7G8kv_WID1zImNlmrmBokD9Ns2l

<img src="The-Northcap-University-NCU-logo.png">
"""

pip install tensorflow

# You can safely ignore any warnings on importing this
from tensorflow import keras
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

"""## Simple y=mx+b+noise data"""

m = 2
b = 3
x = np.linspace(0,50,100)

# 101 is an arbitrary choice to make sure your random values are same as mine!
np.random.seed(101)
noise = np.random.normal(loc=0.0,scale=4.0,size=len(x))

y = 2*x + b + noise

plt.plot(x,y,'*')

"""## Creating a Neural Network for a Line of Best Fit"""

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
# 4 Neurons, expecting only 1 feature with input_dim=1
model.add(Dense(4, input_dim=1, activation='relu'))
# 4 Neurons (Play around with this number!)
model.add(Dense(4, activation='relu'))
# One final output of y, so only 1 neuron
model.add(Dense(1, activation='linear'))
# Compil the layers
model.compile(loss='mse', optimizer='adam')

model.summary()

"""## Train on Data

** NOTE: FOR THIS SIMPLE EXAMPLE, I WILL SKIP THE TRAIN TEST SPLIT!!!! **
"""

model.fit(x, y, epochs=500, verbose=1)

"""## Predicting on new x points

Our previous x was 50 linspace points between 0 and 100. Let's predict for 1000 values between 0 and 100, drawing a line for our predictions (our line of best fit).
"""

x_for_predictions = np.linspace(0,50,1000)

y_predicted = model.predict(x_for_predictions)

# Original X and Y
plt.plot(x,y,'*')
# Our Model's prediction Line
plt.plot(x_for_predictions,y_predicted,'r')

"""# Evaluating Our Error"""

from sklearn.metrics import mean_squared_error,mean_absolute_error

# Labels we do know
prediction_for_true_y = model.predict(x)

mean_squared_error(y,prediction_for_true_y)

mean_absolute_error(y,prediction_for_true_y)

""" Notice how MSE value was being reported out by Keras during training!

 Is this a good error value? Really depends on the context!
"""

